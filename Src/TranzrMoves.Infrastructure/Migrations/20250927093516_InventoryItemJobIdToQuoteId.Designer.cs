// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using TranzrMoves.Infrastructure;

#nullable disable

namespace TranzrMoves.Infrastructure.Migrations
{
    [DbContext(typeof(TranzrMovesDbContext))]
    [Migration("20250927093516_InventoryItemJobIdToQuoteId")]
    partial class InventoryItemJobIdToQuoteId
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("TranzrMoves.Domain.Entities.AdditionalPrice", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CurrencyCode")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)")
                        .HasDefaultValue("GBP");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("EffectiveFrom")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("EffectiveTo")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<DateTimeOffset>("ModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<uint>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("Id");

                    b.HasIndex("Type", "IsActive", "EffectiveFrom", "EffectiveTo");

                    b.ToTable("AdditionalPrices", (string)null);
                });

            modelBuilder.Entity("TranzrMoves.Domain.Entities.CustomerQuote", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("ModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("QuoteId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("QuoteId");

                    b.HasIndex("UserId", "QuoteId")
                        .IsUnique();

                    b.ToTable("CustomerQuotes", (string)null);
                });

            modelBuilder.Entity("TranzrMoves.Domain.Entities.DriverQuote", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("ModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("QuoteId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("QuoteId");

                    b.HasIndex("UserId", "QuoteId")
                        .IsUnique();

                    b.ToTable("DriverQuotes", (string)null);
                });

            modelBuilder.Entity("TranzrMoves.Domain.Entities.LegalDocument", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("BlobName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ContainerName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ContentHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("ContentLength")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("DocumentType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("EffectiveFrom")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("EffectiveTo")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset>("ModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<uint>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.Property<string>("Version")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("DocumentType", "IsActive")
                        .HasDatabaseName("IX_LegalDocuments_DocumentType_IsActive");

                    b.HasIndex("DocumentType", "EffectiveFrom", "EffectiveTo")
                        .HasDatabaseName("IX_LegalDocuments_DocumentType_EffectiveDates");

                    b.ToTable("LegalDocuments", (string)null);
                });

            modelBuilder.Entity("TranzrMoves.Domain.Entities.Quote", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CollectionDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("DeliveryDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal?>("DepositAmount")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("DistanceMiles")
                        .HasColumnType("numeric");

                    b.Property<long>("DriverCount")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DueDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool?>("FlexibleTime")
                        .HasColumnType("boolean");

                    b.Property<int?>("Hours")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("ModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("NumberOfItemsToAssemble")
                        .HasColumnType("integer");

                    b.Property<int>("NumberOfItemsToDismantle")
                        .HasColumnType("integer");

                    b.Property<string>("PaymentIntentId")
                        .HasColumnType("text");

                    b.Property<string>("PaymentMethodId")
                        .HasColumnType("text");

                    b.Property<string>("PaymentStatus")
                        .HasColumnType("text");

                    b.Property<string>("PaymentType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("PricingTier")
                        .HasColumnType("integer");

                    b.Property<string>("QuoteReference")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ReceiptUrl")
                        .HasColumnType("text");

                    b.Property<string>("SessionId")
                        .HasColumnType("text");

                    b.Property<string>("StripeSessionId")
                        .HasColumnType("text");

                    b.Property<string>("TimeSlot")
                        .HasColumnType("text");

                    b.Property<decimal?>("TotalCost")
                        .HasColumnType("numeric");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("VanType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<uint>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("Id");

                    b.HasIndex("SessionId");

                    b.ToTable("Quotes", (string)null);
                });

            modelBuilder.Entity("TranzrMoves.Domain.Entities.QuoteSession", b =>
                {
                    b.Property<string>("SessionId")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ETag")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("ExpiresUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("ModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("SessionId");

                    b.ToTable("QuoteSessions", (string)null);
                });

            modelBuilder.Entity("TranzrMoves.Domain.Entities.RateCard", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("BaseBlockHours")
                        .HasColumnType("integer");

                    b.Property<decimal>("BaseBlockPrice")
                        .HasColumnType("numeric");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CurrencyCode")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)")
                        .HasDefaultValue("GBP");

                    b.Property<DateTimeOffset>("EffectiveFrom")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("EffectiveTo")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("HourlyRateAfter")
                        .HasColumnType("numeric");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<DateTimeOffset>("ModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Movers")
                        .HasColumnType("integer");

                    b.Property<string>("ServiceLevel")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<uint>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("Id");

                    b.HasIndex("Movers", "ServiceLevel", "IsActive", "EffectiveFrom", "EffectiveTo");

                    b.ToTable("RateCards", (string)null);
                });

            modelBuilder.Entity("TranzrMoves.Domain.Entities.ServiceFeature", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("EffectiveFrom")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("EffectiveTo")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<DateTimeOffset>("ModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ServiceLevel")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<uint>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("Id");

                    b.HasIndex("ServiceLevel", "IsActive", "EffectiveFrom", "EffectiveTo", "DisplayOrder");

                    b.ToTable("ServiceFeatures", (string)null);
                });

            modelBuilder.Entity("TranzrMoves.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FullName")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("ModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<string>("Role")
                        .HasColumnType("text");

                    b.Property<Guid?>("SupabaseId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("TranzrMoves.Domain.Entities.CustomerQuote", b =>
                {
                    b.HasOne("TranzrMoves.Domain.Entities.Quote", "Quote")
                        .WithMany("CustomerQuotes")
                        .HasForeignKey("QuoteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TranzrMoves.Domain.Entities.User", "User")
                        .WithMany("CustomerQuotes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Quote");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TranzrMoves.Domain.Entities.DriverQuote", b =>
                {
                    b.HasOne("TranzrMoves.Domain.Entities.Quote", "Quote")
                        .WithMany("DriverQuotes")
                        .HasForeignKey("QuoteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TranzrMoves.Domain.Entities.User", "User")
                        .WithMany("DriverQuotes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Quote");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TranzrMoves.Domain.Entities.Quote", b =>
                {
                    b.HasOne("TranzrMoves.Domain.Entities.QuoteSession", null)
                        .WithMany("Quotes")
                        .HasForeignKey("SessionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.OwnsMany("TranzrMoves.Domain.Entities.InventoryItem", "InventoryItems", b1 =>
                        {
                            b1.Property<Guid>("QuoteId")
                                .HasColumnType("uuid");

                            b1.Property<Guid>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uuid");

                            b1.Property<int?>("Depth")
                                .HasColumnType("integer");

                            b1.Property<string>("Description")
                                .HasColumnType("text");

                            b1.Property<int?>("Height")
                                .HasColumnType("integer");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<int?>("Quantity")
                                .HasColumnType("integer");

                            b1.Property<int?>("Width")
                                .HasColumnType("integer");

                            b1.HasKey("QuoteId", "Id");

                            b1.ToTable("InventoryItems", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("QuoteId");
                        });

                    b.OwnsOne("TranzrMoves.Domain.Entities.Address", "Destination", b1 =>
                        {
                            b1.Property<Guid>("QuoteId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Accuracy")
                                .HasColumnType("text");

                            b1.Property<string>("AddressNumber")
                                .HasColumnType("text");

                            b1.Property<string>("City")
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)");

                            b1.Property<string>("Country")
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)");

                            b1.Property<string>("CountryCode")
                                .HasColumnType("text");

                            b1.Property<string>("County")
                                .HasColumnType("text");

                            b1.Property<string>("District")
                                .HasColumnType("text");

                            b1.Property<int?>("Floor")
                                .HasColumnType("integer");

                            b1.Property<string>("FullAddress")
                                .HasColumnType("text");

                            b1.Property<bool?>("HasElevator")
                                .HasColumnType("boolean");

                            b1.Property<Guid>("Id")
                                .HasColumnType("uuid");

                            b1.Property<double?>("Latitude")
                                .HasColumnType("double precision");

                            b1.Property<string>("Line1")
                                .IsRequired()
                                .HasMaxLength(200)
                                .HasColumnType("character varying(200)");

                            b1.Property<string>("Line2")
                                .HasMaxLength(200)
                                .HasColumnType("character varying(200)");

                            b1.Property<double?>("Longitude")
                                .HasColumnType("double precision");

                            b1.Property<string>("MapboxId")
                                .HasColumnType("text");

                            b1.Property<string>("Neighborhood")
                                .HasColumnType("text");

                            b1.Property<string>("PlaceName")
                                .HasColumnType("text");

                            b1.Property<string>("PostCode")
                                .IsRequired()
                                .HasMaxLength(10)
                                .HasColumnType("character varying(10)");

                            b1.Property<string>("Region")
                                .HasColumnType("text");

                            b1.Property<string>("RegionCode")
                                .HasColumnType("text");

                            b1.Property<string>("Street")
                                .HasColumnType("text");

                            b1.Property<Guid>("UserId")
                                .HasColumnType("uuid");

                            b1.HasKey("QuoteId");

                            b1.ToTable("Quotes");

                            b1.WithOwner()
                                .HasForeignKey("QuoteId");
                        });

                    b.OwnsOne("TranzrMoves.Domain.Entities.Address", "Origin", b1 =>
                        {
                            b1.Property<Guid>("QuoteId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Accuracy")
                                .HasColumnType("text");

                            b1.Property<string>("AddressNumber")
                                .HasColumnType("text");

                            b1.Property<string>("City")
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)");

                            b1.Property<string>("Country")
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)");

                            b1.Property<string>("CountryCode")
                                .HasColumnType("text");

                            b1.Property<string>("County")
                                .HasColumnType("text");

                            b1.Property<string>("District")
                                .HasColumnType("text");

                            b1.Property<int?>("Floor")
                                .HasColumnType("integer");

                            b1.Property<string>("FullAddress")
                                .HasColumnType("text");

                            b1.Property<bool?>("HasElevator")
                                .HasColumnType("boolean");

                            b1.Property<Guid>("Id")
                                .HasColumnType("uuid");

                            b1.Property<double?>("Latitude")
                                .HasColumnType("double precision");

                            b1.Property<string>("Line1")
                                .IsRequired()
                                .HasMaxLength(200)
                                .HasColumnType("character varying(200)");

                            b1.Property<string>("Line2")
                                .HasMaxLength(200)
                                .HasColumnType("character varying(200)");

                            b1.Property<double?>("Longitude")
                                .HasColumnType("double precision");

                            b1.Property<string>("MapboxId")
                                .HasColumnType("text");

                            b1.Property<string>("Neighborhood")
                                .HasColumnType("text");

                            b1.Property<string>("PlaceName")
                                .HasColumnType("text");

                            b1.Property<string>("PostCode")
                                .IsRequired()
                                .HasMaxLength(10)
                                .HasColumnType("character varying(10)");

                            b1.Property<string>("Region")
                                .HasColumnType("text");

                            b1.Property<string>("RegionCode")
                                .HasColumnType("text");

                            b1.Property<string>("Street")
                                .HasColumnType("text");

                            b1.Property<Guid>("UserId")
                                .HasColumnType("uuid");

                            b1.HasKey("QuoteId");

                            b1.ToTable("Quotes");

                            b1.WithOwner()
                                .HasForeignKey("QuoteId");
                        });

                    b.OwnsMany("TranzrMoves.Domain.Entities.QuoteAdditionalPayment", "QuoteAdditionalPayments", b1 =>
                        {
                            b1.Property<Guid>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uuid");

                            b1.Property<decimal>("Amount")
                                .HasColumnType("numeric");

                            b1.Property<string>("Description")
                                .HasColumnType("text");

                            b1.Property<string>("PaymentIntentId")
                                .HasColumnType("text");

                            b1.Property<string>("PaymentMethodId")
                                .HasColumnType("text");

                            b1.Property<Guid>("QuoteId")
                                .HasColumnType("uuid");

                            b1.Property<string>("ReceiptUrl")
                                .HasColumnType("text");

                            b1.HasKey("Id");

                            b1.HasIndex("QuoteId");

                            b1.ToTable("QuoteAdditionalPayments", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("QuoteId");
                        });

                    b.Navigation("Destination");

                    b.Navigation("InventoryItems");

                    b.Navigation("Origin");

                    b.Navigation("QuoteAdditionalPayments");
                });

            modelBuilder.Entity("TranzrMoves.Domain.Entities.User", b =>
                {
                    b.OwnsOne("TranzrMoves.Domain.Entities.Address", "BillingAddress", b1 =>
                        {
                            b1.Property<Guid>("UserId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Accuracy")
                                .HasColumnType("text");

                            b1.Property<string>("AddressNumber")
                                .HasColumnType("text");

                            b1.Property<string>("City")
                                .HasColumnType("text");

                            b1.Property<string>("Country")
                                .HasColumnType("text");

                            b1.Property<string>("CountryCode")
                                .HasColumnType("text");

                            b1.Property<string>("County")
                                .HasColumnType("text");

                            b1.Property<string>("District")
                                .HasColumnType("text");

                            b1.Property<int?>("Floor")
                                .HasColumnType("integer");

                            b1.Property<string>("FullAddress")
                                .HasColumnType("text");

                            b1.Property<bool?>("HasElevator")
                                .HasColumnType("boolean");

                            b1.Property<Guid>("Id")
                                .HasColumnType("uuid");

                            b1.Property<double?>("Latitude")
                                .HasColumnType("double precision");

                            b1.Property<string>("Line1")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("Line2")
                                .HasColumnType("text");

                            b1.Property<double?>("Longitude")
                                .HasColumnType("double precision");

                            b1.Property<string>("MapboxId")
                                .HasColumnType("text");

                            b1.Property<string>("Neighborhood")
                                .HasColumnType("text");

                            b1.Property<string>("PlaceName")
                                .HasColumnType("text");

                            b1.Property<string>("PostCode")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("Region")
                                .HasColumnType("text");

                            b1.Property<string>("RegionCode")
                                .HasColumnType("text");

                            b1.Property<string>("Street")
                                .HasColumnType("text");

                            b1.HasKey("UserId");

                            b1.ToTable("Users");

                            b1.WithOwner()
                                .HasForeignKey("UserId");
                        });

                    b.Navigation("BillingAddress")
                        .IsRequired();
                });

            modelBuilder.Entity("TranzrMoves.Domain.Entities.Quote", b =>
                {
                    b.Navigation("CustomerQuotes");

                    b.Navigation("DriverQuotes");
                });

            modelBuilder.Entity("TranzrMoves.Domain.Entities.QuoteSession", b =>
                {
                    b.Navigation("Quotes");
                });

            modelBuilder.Entity("TranzrMoves.Domain.Entities.User", b =>
                {
                    b.Navigation("CustomerQuotes");

                    b.Navigation("DriverQuotes");
                });
#pragma warning restore 612, 618
        }
    }
}
