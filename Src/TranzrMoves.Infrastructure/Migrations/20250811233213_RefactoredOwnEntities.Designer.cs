// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using TranzrMoves.Infrastructure;

#nullable disable

namespace TranzrMoves.Infrastructure.Migrations
{
    [DbContext(typeof(TranzrMovesDbContext))]
    [Migration("20250811233213_RefactoredOwnEntities")]
    partial class RefactoredOwnEntities
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("TranzrMoves.Domain.Entities.CustomerJob", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("JobId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("JobId");

                    b.HasIndex("UserId", "JobId")
                        .IsUnique();

                    b.ToTable("CustomerJobs", (string)null);
                });

            modelBuilder.Entity("TranzrMoves.Domain.Entities.DriverJob", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("JobId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("JobId");

                    b.HasIndex("UserId", "JobId")
                        .IsUnique();

                    b.ToTable("DriverJobs", (string)null);
                });

            modelBuilder.Entity("TranzrMoves.Domain.Entities.Job", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CollectionDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("DistanceMiles")
                        .HasColumnType("bigint");

                    b.Property<long>("DriverCount")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("PaymentStatus")
                        .HasColumnType("integer");

                    b.Property<int>("PricingTier")
                        .HasColumnType("integer");

                    b.Property<string>("QuoteId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ReceiptUrl")
                        .HasColumnType("text");

                    b.Property<int>("VanType")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Jobs", (string)null);
                });

            modelBuilder.Entity("TranzrMoves.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("FullName")
                        .HasColumnType("text");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<string>("Role")
                        .HasColumnType("text");

                    b.Property<Guid?>("SupabaseId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("TranzrMoves.Domain.Entities.CustomerJob", b =>
                {
                    b.HasOne("TranzrMoves.Domain.Entities.Job", "Job")
                        .WithMany("CustomerJobs")
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TranzrMoves.Domain.Entities.User", "User")
                        .WithMany("CustomerJobs")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Job");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TranzrMoves.Domain.Entities.DriverJob", b =>
                {
                    b.HasOne("TranzrMoves.Domain.Entities.Job", "Job")
                        .WithMany("DriverJobs")
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TranzrMoves.Domain.Entities.User", "User")
                        .WithMany("DriverJobs")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Job");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TranzrMoves.Domain.Entities.Job", b =>
                {
                    b.OwnsOne("TranzrMoves.Domain.Entities.Cost", "Cost", b1 =>
                        {
                            b1.Property<Guid>("JobId")
                                .HasColumnType("uuid");

                            b1.Property<long>("BaseVan")
                                .HasColumnType("bigint");

                            b1.Property<double>("Distance")
                                .HasColumnType("double precision");

                            b1.Property<long>("Driver")
                                .HasColumnType("bigint");

                            b1.Property<long>("ElevatorAdjustment")
                                .HasColumnType("bigint");

                            b1.Property<long>("Floor")
                                .HasColumnType("bigint");

                            b1.Property<double>("TierAdjustment")
                                .HasColumnType("double precision");

                            b1.Property<double>("Total")
                                .HasColumnType("double precision");

                            b1.HasKey("JobId");

                            b1.ToTable("Jobs");

                            b1.WithOwner()
                                .HasForeignKey("JobId");
                        });

                    b.OwnsMany("TranzrMoves.Domain.Entities.InventoryItem", "InventoryItems", b1 =>
                        {
                            b1.Property<Guid>("JobId")
                                .HasColumnType("uuid");

                            b1.Property<Guid>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uuid");

                            b1.Property<int?>("Depth")
                                .HasColumnType("integer");

                            b1.Property<string>("Description")
                                .HasColumnType("text");

                            b1.Property<int?>("Height")
                                .HasColumnType("integer");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<int?>("Quantity")
                                .HasColumnType("integer");

                            b1.Property<int?>("Width")
                                .HasColumnType("integer");

                            b1.HasKey("JobId", "Id");

                            b1.ToTable("InventoryItems", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("JobId");
                        });

                    b.OwnsOne("TranzrMoves.Domain.Entities.Address", "Destination", b1 =>
                        {
                            b1.Property<Guid>("JobId")
                                .HasColumnType("uuid");

                            b1.Property<string>("AddressLine1")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("AddressLine2")
                                .HasColumnType("text");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("Country")
                                .HasColumnType("text");

                            b1.Property<string>("County")
                                .HasColumnType("text");

                            b1.Property<Guid>("Id")
                                .HasColumnType("uuid");

                            b1.Property<string>("PostCode")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<Guid>("UserId")
                                .HasColumnType("uuid");

                            b1.HasKey("JobId");

                            b1.ToTable("Jobs");

                            b1.WithOwner()
                                .HasForeignKey("JobId");
                        });

                    b.OwnsOne("TranzrMoves.Domain.Entities.Address", "Origin", b1 =>
                        {
                            b1.Property<Guid>("JobId")
                                .HasColumnType("uuid");

                            b1.Property<string>("AddressLine1")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("AddressLine2")
                                .HasColumnType("text");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("Country")
                                .HasColumnType("text");

                            b1.Property<string>("County")
                                .HasColumnType("text");

                            b1.Property<Guid>("Id")
                                .HasColumnType("uuid");

                            b1.Property<string>("PostCode")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<Guid>("UserId")
                                .HasColumnType("uuid");

                            b1.HasKey("JobId");

                            b1.ToTable("Jobs");

                            b1.WithOwner()
                                .HasForeignKey("JobId");
                        });

                    b.Navigation("Cost");

                    b.Navigation("Destination")
                        .IsRequired();

                    b.Navigation("InventoryItems");

                    b.Navigation("Origin")
                        .IsRequired();
                });

            modelBuilder.Entity("TranzrMoves.Domain.Entities.User", b =>
                {
                    b.OwnsOne("TranzrMoves.Domain.Entities.Address", "BillingAddress", b1 =>
                        {
                            b1.Property<Guid>("UserId")
                                .HasColumnType("uuid");

                            b1.Property<string>("AddressLine1")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("AddressLine2")
                                .HasColumnType("text");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("Country")
                                .HasColumnType("text");

                            b1.Property<string>("County")
                                .HasColumnType("text");

                            b1.Property<Guid>("Id")
                                .HasColumnType("uuid");

                            b1.Property<string>("PostCode")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.HasKey("UserId");

                            b1.ToTable("Users");

                            b1.WithOwner()
                                .HasForeignKey("UserId");
                        });

                    b.Navigation("BillingAddress")
                        .IsRequired();
                });

            modelBuilder.Entity("TranzrMoves.Domain.Entities.Job", b =>
                {
                    b.Navigation("CustomerJobs");

                    b.Navigation("DriverJobs");
                });

            modelBuilder.Entity("TranzrMoves.Domain.Entities.User", b =>
                {
                    b.Navigation("CustomerJobs");

                    b.Navigation("DriverJobs");
                });
#pragma warning restore 612, 618
        }
    }
}
