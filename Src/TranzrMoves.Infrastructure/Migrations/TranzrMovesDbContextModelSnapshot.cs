// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using TranzrMoves.Infrastructure;

#nullable disable

namespace TranzrMoves.Infrastructure.Migrations
{
    [DbContext(typeof(TranzrMovesDbContext))]
    partial class TranzrMovesDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("TranzrMoves.Domain.Entities.CustomerQuote", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("QuoteId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("QuoteId");

                    b.HasIndex("UserId", "QuoteId")
                        .IsUnique();

                    b.ToTable("CustomerQuotes", (string)null);
                });

            modelBuilder.Entity("TranzrMoves.Domain.Entities.DriverQuote", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("QuoteId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("QuoteId");

                    b.HasIndex("UserId", "QuoteId")
                        .IsUnique();

                    b.ToTable("DriverQuotes", (string)null);
                });

            modelBuilder.Entity("TranzrMoves.Domain.Entities.Quote", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateOnly?>("CollectionDate")
                        .HasColumnType("date");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateOnly?>("DeliveryDate")
                        .HasColumnType("date");

                    b.Property<decimal?>("DepositAmount")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("DistanceMiles")
                        .HasColumnType("numeric");

                    b.Property<long>("DriverCount")
                        .HasColumnType("bigint");

                    b.Property<bool?>("FlexibleTime")
                        .HasColumnType("boolean");

                    b.Property<int?>("Hours")
                        .HasColumnType("integer");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("NumberOfItemsToAssemble")
                        .HasColumnType("integer");

                    b.Property<int>("NumberOfItemsToDismantle")
                        .HasColumnType("integer");

                    b.Property<int?>("PaymentStatus")
                        .HasColumnType("integer");

                    b.Property<int>("PaymentType")
                        .HasColumnType("integer");

                    b.Property<int?>("PricingTier")
                        .HasColumnType("integer");

                    b.Property<string>("QuoteReference")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ReceiptUrl")
                        .HasColumnType("text");

                    b.Property<string>("SessionId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("TimeSlot")
                        .HasColumnType("integer");

                    b.Property<decimal?>("TotalCost")
                        .HasColumnType("numeric");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<int>("VanType")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("SessionId");

                    b.ToTable("Quotes", (string)null);
                });

            modelBuilder.Entity("TranzrMoves.Domain.Entities.QuoteSession", b =>
                {
                    b.Property<string>("SessionId")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ETag")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("ExpiresUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("SessionId");

                    b.ToTable("QuoteSessions", (string)null);
                });

            modelBuilder.Entity("TranzrMoves.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("FullName")
                        .HasColumnType("text");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<string>("Role")
                        .HasColumnType("text");

                    b.Property<Guid?>("SupabaseId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("TranzrMoves.Domain.Entities.CustomerQuote", b =>
                {
                    b.HasOne("TranzrMoves.Domain.Entities.Quote", "Quote")
                        .WithMany("CustomerQuotes")
                        .HasForeignKey("QuoteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TranzrMoves.Domain.Entities.User", "User")
                        .WithMany("CustomerQuotes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Quote");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TranzrMoves.Domain.Entities.DriverQuote", b =>
                {
                    b.HasOne("TranzrMoves.Domain.Entities.Quote", "Quote")
                        .WithMany("DriverQuotes")
                        .HasForeignKey("QuoteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TranzrMoves.Domain.Entities.User", "User")
                        .WithMany("DriverQuotes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Quote");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TranzrMoves.Domain.Entities.Quote", b =>
                {
                    b.HasOne("TranzrMoves.Domain.Entities.QuoteSession", null)
                        .WithMany("Quotes")
                        .HasForeignKey("SessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsMany("TranzrMoves.Domain.Entities.InventoryItem", "InventoryItems", b1 =>
                        {
                            b1.Property<Guid>("JobId")
                                .HasColumnType("uuid");

                            b1.Property<Guid>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uuid");

                            b1.Property<int?>("Depth")
                                .HasColumnType("integer");

                            b1.Property<string>("Description")
                                .HasColumnType("text");

                            b1.Property<int?>("Height")
                                .HasColumnType("integer");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<int?>("Quantity")
                                .HasColumnType("integer");

                            b1.Property<int?>("Width")
                                .HasColumnType("integer");

                            b1.HasKey("JobId", "Id");

                            b1.ToTable("InventoryItems", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("JobId");
                        });

                    b.OwnsOne("TranzrMoves.Domain.Entities.Address", "Destination", b1 =>
                        {
                            b1.Property<Guid>("QuoteId")
                                .HasColumnType("uuid");

                            b1.Property<string>("City")
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)");

                            b1.Property<string>("Country")
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)");

                            b1.Property<string>("County")
                                .HasColumnType("text");

                            b1.Property<int>("Floor")
                                .HasColumnType("integer");

                            b1.Property<bool>("HasElevator")
                                .HasColumnType("boolean");

                            b1.Property<Guid>("Id")
                                .HasColumnType("uuid");

                            b1.Property<string>("Line1")
                                .IsRequired()
                                .HasMaxLength(200)
                                .HasColumnType("character varying(200)");

                            b1.Property<string>("Line2")
                                .HasMaxLength(200)
                                .HasColumnType("character varying(200)");

                            b1.Property<string>("PostCode")
                                .IsRequired()
                                .HasMaxLength(10)
                                .HasColumnType("character varying(10)");

                            b1.Property<Guid>("UserId")
                                .HasColumnType("uuid");

                            b1.HasKey("QuoteId");

                            b1.ToTable("Quotes");

                            b1.WithOwner()
                                .HasForeignKey("QuoteId");
                        });

                    b.OwnsOne("TranzrMoves.Domain.Entities.Address", "Origin", b1 =>
                        {
                            b1.Property<Guid>("QuoteId")
                                .HasColumnType("uuid");

                            b1.Property<string>("City")
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)");

                            b1.Property<string>("Country")
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)");

                            b1.Property<string>("County")
                                .HasColumnType("text");

                            b1.Property<int>("Floor")
                                .HasColumnType("integer");

                            b1.Property<bool>("HasElevator")
                                .HasColumnType("boolean");

                            b1.Property<Guid>("Id")
                                .HasColumnType("uuid");

                            b1.Property<string>("Line1")
                                .IsRequired()
                                .HasMaxLength(200)
                                .HasColumnType("character varying(200)");

                            b1.Property<string>("Line2")
                                .HasMaxLength(200)
                                .HasColumnType("character varying(200)");

                            b1.Property<string>("PostCode")
                                .IsRequired()
                                .HasMaxLength(10)
                                .HasColumnType("character varying(10)");

                            b1.Property<Guid>("UserId")
                                .HasColumnType("uuid");

                            b1.HasKey("QuoteId");

                            b1.ToTable("Quotes");

                            b1.WithOwner()
                                .HasForeignKey("QuoteId");
                        });

                    b.Navigation("Destination");

                    b.Navigation("InventoryItems");

                    b.Navigation("Origin");
                });

            modelBuilder.Entity("TranzrMoves.Domain.Entities.User", b =>
                {
                    b.OwnsOne("TranzrMoves.Domain.Entities.Address", "BillingAddress", b1 =>
                        {
                            b1.Property<Guid>("UserId")
                                .HasColumnType("uuid");

                            b1.Property<string>("City")
                                .HasColumnType("text");

                            b1.Property<string>("Country")
                                .HasColumnType("text");

                            b1.Property<string>("County")
                                .HasColumnType("text");

                            b1.Property<int>("Floor")
                                .HasColumnType("integer");

                            b1.Property<bool>("HasElevator")
                                .HasColumnType("boolean");

                            b1.Property<Guid>("Id")
                                .HasColumnType("uuid");

                            b1.Property<string>("Line1")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("Line2")
                                .HasColumnType("text");

                            b1.Property<string>("PostCode")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.HasKey("UserId");

                            b1.ToTable("Users");

                            b1.WithOwner()
                                .HasForeignKey("UserId");
                        });

                    b.Navigation("BillingAddress")
                        .IsRequired();
                });

            modelBuilder.Entity("TranzrMoves.Domain.Entities.Quote", b =>
                {
                    b.Navigation("CustomerQuotes");

                    b.Navigation("DriverQuotes");
                });

            modelBuilder.Entity("TranzrMoves.Domain.Entities.QuoteSession", b =>
                {
                    b.Navigation("Quotes");
                });

            modelBuilder.Entity("TranzrMoves.Domain.Entities.User", b =>
                {
                    b.Navigation("CustomerQuotes");

                    b.Navigation("DriverQuotes");
                });
#pragma warning restore 612, 618
        }
    }
}
